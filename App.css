from utils.configuration.configuration import Configurations
from utils.feed.feed import Feed

from re import sub
from typing import List, Dict

class HierarchyLevelFeed(Feed):
    def __init__(self):
        Feed.__init__(self)

        config = Configurations()
        self._sds_hierarchy_attributes_config = config.get_sds_hierarchy_attributes()

    def _hierarchy_content(self, hierarchy_data: List[Dict[str, any]], feed_name: str):
        if "attributes" not in self._sds_hierarchy_attributes_config:
            raise Exception("Did not find attributes to create hierarchy feed.")

        if not isinstance(hierarchy_data, list):
            raise Exception("The data should be of List type.")

        # Dynamically fetch headers from configuration
        headers = self._sds_hierarchy_attributes_config["attributes"]
        headers = sub(r"[\n\t\s]*", "", headers).split(",")

        # Preprocess `hierarchy_data` into a dictionary for O(1) lookup
        hierarchy_dict = {item.get("type"): item for item in hierarchy_data}

        # Initialize the flattened structure
        flattened_row = {}
        hierarchy_levels = ["Level10", "Level9", "Level8", "Level7", "Level6", "SubProduct", "BusinessArea", "ProductArea", "Company", "Group"]

        for level in hierarchy_levels:
            level_data = hierarchy_dict.get(level)
            if level_data:
                for header in headers:
                    if header in ["id", "name"]:
                        flattened_row[f"{level}{header}"] = level_data.get(header)
            else:
                for header in headers:
                    if header in ["id", "name"]:
                        flattened_row[f"{level}{header}"] = None

        # Use headers to create column keys for the output
        output_headers = [f"{level}{header}" for level in hierarchy_levels for header in headers if header in ["id", "name"]]

        # Return the flattened data as a feed file
        return self._create_feed_file(output_headers, [flattened_row], feed_name)

    def feed(self, hierarchy_data):
        feed_name = self._feed_name(sds_entity="hierarchy", is_json=False)
        feed_file_content = self._hierarchy_content(hierarchy_data, feed_name)
        self._save_feed(feed_name, feed_file_content)
        return feed_name
