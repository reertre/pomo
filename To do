from utils.configuration.configuration import Configurations
from utils.feed.feed import Feed

from re import sub
from typing import List, Dict


class SystemFeed(Feed):
    def __init__(self):
        Feed.__init__(self)
        config = Configurations()
        self._sds_system_feed_attributes_config = config.get_sds_system_feed_attributes()

    def _system_feed_content(self, system_data: List[Dict[str, any]], feed_name: str):
        if "attributes" not in self._sds_system_feed_attributes_config:
            raise Exception("Did not find attributes to create system feed.")
        
        headers = self._sds_system_feed_attributes_config["attributes"]
        headers = sub(r"[\n\t\s]*", "", headers).split(",")

        all_system_information = list()

        # Iterate through each system in the data
        for system in system_data:
            curr_system_info = dict()
            for header in headers:
                # Extract data for each header if it exists in the system
                curr_system_info[header] = (
                    system[header] if header in system else None
                )
            all_system_information.append(curr_system_info)

        # Create the feed file with extracted information
        return self._create_feed_file(headers, all_system_information, feed_name)

    def feed(self, system_data):
        # Generate the feed name
        feed_name = self._feed_name(sds_entity="system_feed", is_json=False)

        # Generate the feed content
        feed_file_content = self._system_feed_content(system_data, feed_name)

        # Save the feed file
        self._save(feed_name, content=feed_file_content)

        # Return the feed name for reference
        return feed_name