#!/usr/bin/env bash

###############################################################################
# ADD THESE LINES AT THE TOP (DO NOT MODIFY ANYTHING BELOW THIS MARK)
###############################################################################

# Define the target scheme you want (for this script, TDB_HIST)
target_scheme="TDB_HIST"

# Define the folder where the parameter text file is located and the file name.
param_dir="params"
param_file="${param_dir}/all_files.txt"

# Verify the parameter file exists.
if [ -f "$param_file" ]; then
  # Use awk to extract lines belonging to the target scheme.
  # This awk script does the following:
  #  - When it sees a line that starts with "# Scheme:", it sets flag to 1 if the scheme matches target_scheme, or 0 otherwise.
  #  - It then prints non-empty lines only when flag==1.
  mapfile -t scheme_lines < <(awk -v target="$target_scheme" '
    BEGIN { flag=0 }
    /^# Scheme:/ {
      if ($0 == "# Scheme: " target) { flag=1; next }
      else { flag=0 }
    }
    flag && NF { print }
  ' "$param_file")
else
  echo "WARNING: Parameter file '$param_file' not found or empty"
  scheme_lines=()
fi

# Initialize empty arrays for .dat and .sql files.
dat_array=()
sql_array=()

# Loop through each line extracted for the target scheme
for line in "${scheme_lines[@]}"; do
  # Based on the file extension, add to the appropriate array.
  if [[ $line == *.dat ]]; then
    dat_array+=( "$line" )
  elif [[ $line == *.sql ]]; then
    sql_array+=( "$line" )
  fi
done

# Join each array into a space-separated string.
sorted_dat_files="${dat_array[*]}"
sorted_std_files="${sql_array[*]}"

###############################################################################
# DO NOT CHANGE ANYTHING BELOW THIS LINE
###############################################################################

export PATH=/flex_data/mfr_ft/loader/bin:$PATH
source ../devprofile

prefix="$(basename "$0" .sh)"
std_start="${prefix}_tbl_hist_1.sql"
std_end="${prefix}_tbl_hist_2.sql"

if [ ! -f "$std_start" ]; then
  echo "Standard start script $std_start not found" >&2
  exit 1
fi

if [ ! -f "$std_end" ]; then
  echo "Standard end script $std_end not found" >&2
  exit 1
fi

echo "Execution order:"
echo "  $std_start"

# Loop through sorted_dat_files and call sqlldr for each .dat file.
for file in $sorted_dat_files; do
  echo "Loading $file..."
  sqlldr login_tdb_hist control="$file"
done

echo "  $std_end"

sqlplus -s login_tdb_hist <<EOF
  SET echo on timing on trimspool on scan off pagesize 0 linesize 1000
  SPOOL ${prefix}.log

  PROMPT Executing $std_start
  @$std_start

$( for file in $sorted_std_files; do
    echo "PROMPT Executing $file"
    echo "@$file"
done )

  PROMPT Executing $std_end
  @$std_end

  SPOOL OFF
EOF