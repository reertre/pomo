#!/bin/bash

CURRENT_BRANCH=$CI_DEFAULT_BRANCH
TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
RELEASE_FOLDER="releases/release-$TIMESTAMP"

echo "Fetching all remote branches..."
git fetch --all > /dev/null 2>&1 || { echo "Error fetching branches"; exit 1; }

echo "Detecting the release branch..."
if [[ "$CURRENT_BRANCH" == release/* ]]; then
    release_BRANCH="$CURRENT_BRANCH"
else
    release_BRANCH=$(git for-each-ref --sort=-committerdate refs/remotes/origin/release/* --format='%(refname:lstrip=3)' | head -n 1)
fi

echo "Detected release branch: $release_BRANCH"

if [[ -z "$release_BRANCH" ]]; then
    echo "Error: No release branch found."
    exit 1
fi

echo "Validating release branch '$release_BRANCH'..."
if ! git ls-remote --heads origin "$release_BRANCH" > /dev/null 2>&1; then
    echo "Error: Branch '$release_BRANCH' does not exist in the remote repository."
    exit 1
fi

echo "Fetching the latest updates from '$release_BRANCH'..."
git fetch origin "$release_BRANCH:$release_BRANCH" > /dev/null 2>&1 || { echo "Error fetching release branch"; exit 1; }

echo "Comparing '$CURRENT_BRANCH' with '$release_BRANCH'..."
git checkout "$CURRENT_BRANCH" > /dev/null 2>&1 || { echo "Error checking out current branch"; exit 1; }
git checkout "$release_BRANCH" > /dev/null 2>&1 || { echo "Error checking out release branch"; exit 1; }

CHANGED_FILES=$(git diff --name-only origin/"$CURRENT_BRANCH" origin/"$release_BRANCH")

if [[ -z "$CHANGED_FILES" ]]; then
    echo "No changes detected."
    exit 0
fi

latestdir=$(pwd)
NEW_RELEASE_FOLDER="$latestdir/$RELEASE_FOLDER"
mkdir -p "$NEW_RELEASE_FOLDER"

echo "Copying Changed Files..."
for file in $CHANGED_FILES; do
    clean_path="${file#branches/}"
    mkdir -p "$NEW_RELEASE_FOLDER/$(dirname "$clean_path")"
    cp "$file" "$NEW_RELEASE_FOLDER/$clean_path"
done

# Restructure Unix
BASE_UNIX_DIR="$NEW_RELEASE_FOLDER/unix"
mkdir -p "$NEW_RELEASE_FOLDER/Unix"
find "$BASE_UNIX_DIR" -type f -exec mv {} "$NEW_RELEASE_FOLDER/Unix/" \;
find "$BASE_UNIX_DIR" -type d -empty -delete

# Restructure Autosys
BASE_AUTOSYS_DIR="$NEW_RELEASE_FOLDER/autosys"
mkdir -p "$NEW_RELEASE_FOLDER/Autosys"
find "$BASE_AUTOSYS_DIR" -type f -exec mv {} "$NEW_RELEASE_FOLDER/Autosys/" \;
find "$BASE_AUTOSYS_DIR" -type d -empty -delete

# Restructure Tdb_hist
BASE_TDB_DIR="$NEW_RELEASE_FOLDER/database/tdb_hist"
mkdir -p "$NEW_RELEASE_FOLDER/database/Tdb_hist"
find "$BASE_TDB_DIR" -type f -exec mv {} "$NEW_RELEASE_FOLDER/database/Tdb_hist/" \;
find "$BASE_TDB_DIR" -type d -empty -delete

echo "âœ… Restructuring completed successfully!"