from utils.configuration.configuration import Configurations
from utils.feed.feed import Feed

from re import sub
from typing import List, Dict

class HierarchyLevelFeed(Feed):
    def __init__(self):
        Feed.__init__(self)

        config = Configurations()
        self._sds_hierarchy_attributes_config = config.get_sds_hierarchy_attributes()

    def _hierarchy_content(self, hierarchy_data: List[Dict[str, any]], feed_name: str):
        if "attributes" not in self._sds_hierarchy_attributes_config:
            raise Exception("Did not find attributes to create hierarchy feed.")

        if not isinstance(hierarchy_data, list):
            raise Exception("The data should be of List type.")

        headers = self._sds_hierarchy_attributes_config["attributes"]
        headers = sub(r"[\n\t\s]*", "", headers).split(",")

        # Create a dictionary to store flattened data
        flattened_row = {}
        hierarchy_levels = ["Level10", "Level9", "Level8", "Level7", "Level6", "SubProduct", "BusinessArea", "ProductArea", "Company", "Group"]

        for level in hierarchy_levels:
            # Filter data for the current level
            level_data = next((item for item in hierarchy_data if item.get("type") == level), None)
            if level_data:
                flattened_row[f"{level}id"] = level_data.get("id")
                flattened_row[f"{level}name"] = level_data.get("name")
            else:
                flattened_row[f"{level}id"] = None
                flattened_row[f"{level}name"] = None

        # Return flattened data
        return self._create_feed_file(headers, [flattened_row], feed_name)

    def feed(self, hierarchy_data):
        feed_name = self._feed_name(sds_entity="hierarchy", is_json=False)
        feed_file_content = self._hierarchy_content(hierarchy_data, feed_name)
        self._save_feed(feed_name, feed_file_content)
        return feed_name
